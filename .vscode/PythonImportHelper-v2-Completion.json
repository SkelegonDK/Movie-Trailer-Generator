[
    {
        "label": "runpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "runpy",
        "description": "runpy",
        "detail": "runpy",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "streamlit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "streamlit",
        "description": "streamlit",
        "detail": "streamlit",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "card",
        "importPath": "scripts.functions",
        "description": "scripts.functions",
        "isExtraImport": true,
        "detail": "scripts.functions",
        "documentation": {}
    },
    {
        "label": "generate_audio_with_elevenlabs",
        "importPath": "scripts.functions",
        "description": "scripts.functions",
        "isExtraImport": true,
        "detail": "scripts.functions",
        "documentation": {}
    },
    {
        "label": "generate_movie_name_with_id",
        "importPath": "scripts.functions",
        "description": "scripts.functions",
        "isExtraImport": true,
        "detail": "scripts.functions",
        "documentation": {}
    },
    {
        "label": "generate_script_with_ollama",
        "importPath": "scripts.functions",
        "description": "scripts.functions",
        "isExtraImport": true,
        "detail": "scripts.functions",
        "documentation": {}
    },
    {
        "label": "get_trailer_points",
        "importPath": "scripts.functions",
        "description": "scripts.functions",
        "isExtraImport": true,
        "detail": "scripts.functions",
        "documentation": {}
    },
    {
        "label": "save_audio_file",
        "importPath": "scripts.functions",
        "description": "scripts.functions",
        "isExtraImport": true,
        "detail": "scripts.functions",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"Stupid-Movie-Trailer-Generator\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.12/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"Stupid-Movie-Trailer-Generator\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.12/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"Stupid-Movie-Trailer-Generator\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.12/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"Stupid-Movie-Trailer-Generator\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.12/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = \"Stupid-Movie-Trailer-Generator\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.12/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"../lib/python3.12/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "create_secrets_file",
        "kind": 2,
        "importPath": "pages.api_keys",
        "description": "pages.api_keys",
        "peekOfCode": "def create_secrets_file():\n    secrets_path = os.path.join(\".streamlit\", \"secrets.toml\")\n    if not os.path.exists(\".streamlit\"):\n        os.makedirs(\".streamlit\")\n    if not os.path.exists(secrets_path):\n        with open(secrets_path, \"w\") as f:\n            f.write(\n                \"# This is where you store your API keys. DO NOT share this file!\\n\"\n            )\n        st.success(",
        "detail": "pages.api_keys",
        "documentation": {}
    },
    {
        "label": "elevenlabs_api_key",
        "kind": 5,
        "importPath": "pages.api_keys",
        "description": "pages.api_keys",
        "peekOfCode": "elevenlabs_api_key = st.text_input(\n    \"Enter your ElevenLabs API key\",\n    type=\"password\",\n    value=st.secrets.get(\"ELEVENLABS_API_KEY\", \"\"),\n)\nif elevenlabs_api_key:\n    st.session_state.elevenlabs_api_key = elevenlabs_api_key\n    # Save the API key to secrets.toml\n    secrets_path = os.path.join(\".streamlit\", \"secrets.toml\")\n    with open(secrets_path, \"w\") as f:",
        "detail": "pages.api_keys",
        "documentation": {}
    },
    {
        "label": "audio_files",
        "kind": 5,
        "importPath": "pages.audio_browser",
        "description": "pages.audio_browser",
        "peekOfCode": "audio_files = [f for f in os.listdir(\"generated_audio\") if f.endswith(\".mp3\")]\naudio_files.sort(\n    key=lambda x: os.path.getmtime(os.path.join(\"generated_audio\", x)),\n    reverse=True,\n)\nif audio_files:\n    for audio_file in audio_files:\n        audio_path = os.path.join(\"generated_audio\", audio_file)\n        st.markdown(f\"**{audio_file}**\")\n        st.audio(audio_path, format=\"audio/mp3\")",
        "detail": "pages.audio_browser",
        "documentation": {}
    },
    {
        "label": "get_trailer_points",
        "kind": 2,
        "importPath": "scripts.functions",
        "description": "scripts.functions",
        "peekOfCode": "def get_trailer_points():\n    \"\"\"\n    Retrieves trailer elements from JSON files in the assets/data directory.\n    Returns:\n        list: A list of dictionaries, where each dictionary represents a trailer element\n              (genre, main_character, setting, conflict, plot_twist) and contains\n              its category and options.\n    \"\"\"\n    category_order = [\"genre\", \"main_character\", \"setting\", \"conflict\", \"plot_twist\"]\n    trailer_points = []",
        "detail": "scripts.functions",
        "documentation": {}
    },
    {
        "label": "generate_with_llama3",
        "kind": 2,
        "importPath": "scripts.functions",
        "description": "scripts.functions",
        "peekOfCode": "def generate_with_llama3(prompt):\n    \"\"\"\n    Generates content using the Llama3 model via a local Ollama instance.\n    Args:\n        prompt (str): The prompt to send to the Llama3 model.\n    Returns:\n        str: The generated content from the Llama3 model, or None if an error occurs.\n    \"\"\"\n    url = \"http://localhost:11434/api/generate\"\n    data = {\"model\": \"llama3.2:3b\", \"prompt\": prompt, \"stream\": False}",
        "detail": "scripts.functions",
        "documentation": {}
    },
    {
        "label": "card",
        "kind": 2,
        "importPath": "scripts.functions",
        "description": "scripts.functions",
        "peekOfCode": "def card(category, option, color):\n    \"\"\"\n    Displays a card with a category and option.\n    Args:\n        category (str): The category of the card.\n        option (str): The option to display on the card.\n        color (str): The background color of the card.\n    \"\"\"\n    st.markdown(\n        f\"\"\"",
        "detail": "scripts.functions",
        "documentation": {}
    },
    {
        "label": "generate_script_with_ollama",
        "kind": 2,
        "importPath": "scripts.functions",
        "description": "scripts.functions",
        "peekOfCode": "def generate_script_with_ollama(prompt):\n    \"\"\"\n    Generates a movie trailer script using the Llama3 model via a local Ollama instance.\n    Args:\n        prompt (str): The prompt to send to the Llama3 model.\n    Returns:\n        str: The generated movie trailer script from the Llama3 model, or None if an error occurs.\n    \"\"\"\n    url = \"http://localhost:11434/api/generate\"\n    data = {\"model\": \"llama3.2:3b\", \"prompt\": prompt, \"stream\": False}",
        "detail": "scripts.functions",
        "documentation": {}
    },
    {
        "label": "generate_audio_with_elevenlabs",
        "kind": 2,
        "importPath": "scripts.functions",
        "description": "scripts.functions",
        "peekOfCode": "def generate_audio_with_elevenlabs(text, voice_id=\"FF7KdobWPaiR0vkcALHF\"):\n    url = f\"https://api.elevenlabs.io/v1/text-to-speech/{voice_id}\"\n    headers = {\n        \"Accept\": \"audio/mpeg\",\n        \"Content-Type\": \"application/json\",\n        \"xi-api-key\": st.secrets.get(\"ELEVENLABS_API_KEY\"),\n    }\n    data = {\n        \"text\": text,\n        \"model_id\": \"eleven_turbo_v2_5\",",
        "detail": "scripts.functions",
        "documentation": {}
    },
    {
        "label": "save_audio_file",
        "kind": 2,
        "importPath": "scripts.functions",
        "description": "scripts.functions",
        "peekOfCode": "def save_audio_file(audio_content, selected_points):\n    \"\"\"\n    Saves the generated audio content to a file in the generated_audio directory.\n    Args:\n        audio_content (bytes): The audio content to save.\n        selected_points (dict): A dictionary of selected trailer elements.\n    Returns:\n        str: The filepath of the saved audio file.\n    \"\"\"\n    if not os.path.exists(\"generated_audio\"):",
        "detail": "scripts.functions",
        "documentation": {}
    },
    {
        "label": "save_movie_data",
        "kind": 2,
        "importPath": "scripts.functions",
        "description": "scripts.functions",
        "peekOfCode": "def save_movie_data(movie_name, script, output_dir=\"assets/data\"):\n    \"\"\"\n    Saves the movie data (name and script) to a JSON file in the assets/data directory.\n    Args:\n        movie_name (str): The name of the movie.\n        script (str): The movie trailer script.\n        output_dir (str, optional): The directory to save the movie data to. Defaults to \"assets/data\".\n    Returns:\n        str: The filepath of the saved movie data file.\n    \"\"\"",
        "detail": "scripts.functions",
        "documentation": {}
    },
    {
        "label": "generate_movie_name_with_id",
        "kind": 2,
        "importPath": "scripts.functions",
        "description": "scripts.functions",
        "peekOfCode": "def generate_movie_name_with_id(filename):\n    \"\"\"\n    Generates a movie title using the Llama3 model, incorporating a unique ID.\n    Args:\n        filename (str): The base filename to use for generating the movie title.\n    Returns:\n        str: The generated movie title in JSON format, or None if an error occurs.\n    \"\"\"\n    unique_id = uuid.uuid4()\n    prompt = f\"\"\"Based on the filename {filename} and unique ID {unique_id}, generate a catchy and appropriate movie title in JSON format:",
        "detail": "scripts.functions",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": "stupid_movie_generator.bin.activate_this",
        "description": "stupid_movie_generator.bin.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.12/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": "stupid_movie_generator.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": "stupid_movie_generator.bin.activate_this",
        "description": "stupid_movie_generator.bin.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.12/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)",
        "detail": "stupid_movie_generator.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": "stupid_movie_generator.bin.activate_this",
        "description": "stupid_movie_generator.bin.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.12/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": "stupid_movie_generator.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": "stupid_movie_generator.bin.activate_this",
        "description": "stupid_movie_generator.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.12/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "stupid_movie_generator.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": "stupid_movie_generator.bin.activate_this",
        "description": "stupid_movie_generator.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.12/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "stupid_movie_generator.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": "stupid_movie_generator.bin.activate_this",
        "description": "stupid_movie_generator.bin.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"../lib/python3.12/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "stupid_movie_generator.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": "stupid_movie_generator.bin.activate_this",
        "description": "stupid_movie_generator.bin.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "stupid_movie_generator.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": "stupid_movie_generator.bin.activate_this",
        "description": "stupid_movie_generator.bin.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "stupid_movie_generator.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": "stupid_movie_generator.bin.activate_this",
        "description": "stupid_movie_generator.bin.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": "stupid_movie_generator.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def main():\n    st.set_page_config(page_title=\"Movie Trailer Generator\", layout=\"wide\")\n    st.title(\"Movie Trailer Generator\")\n    trailer_points = get_trailer_points()\n    colors = [\"#FFB3BA\", \"#BAFFC9\", \"#BAE1FF\", \"#FFFFBA\", \"#FFDFBA\"]\n    if \"selected_points\" not in st.session_state:\n        st.session_state.selected_points = {\n            point[\"category\"]: random.choice(point[\"options\"])\n            for point in trailer_points\n        }",
        "detail": "app",
        "documentation": {}
    }
]